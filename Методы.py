                                            #Строки и их методы (!!!)

# s= 'Hello world'

# s = s.upper() - Делает буквы Заглавными
# s = s.lower() - Делает буквы прописными (обычными)
# s = s.count('o') - Считает кол-во определённых букв в объекте s = 1
# s = s.find() - ищет индект подстроки которую мы задаём (показывает индекс её позиции)
# Ищет аргумент который находится ближе всего к левому краю
# s = s.rfind('o') - ищет индекст подстроки которую мы задаём, только ищет заданный аргумент по правому краю
# s = s.index() - Метод равный логике find, только если мы зададим насуществующий индекс, нам выведется ошибка
# s = s.replace('o','?') - Метод замены указыннах агрументов на новое значение (не изменяет) s = Hell? W?rld
# s = s.isalpha() - данный метод проверяет, состоит ли данная строка целиком из букв s = False (т.к. у нас есть пробел)
# s = s.isdigit() - данный метод проверяет, стоит ли строка полностью из цифр

# s.rjust()
# s = '111'; s = s.rjust(5) - дополняет нашу строку до длины которую мы указали в агрументе s = '  111'
# Данная строка заполняется справа, т.к. указан метод rjust = right
# s = '111'; s = s.rjust(5,'0') - Добавляет вместо проблеа, объект указанный в аргументе s = '00111'

# s.ljust()
# s = s.ljust(5,'-') - всё тоже самое, что и rjust, только данные будут слева s = '111--'

# s.split()
# s = 'Ivanov Ivan Ivanovich'; s = s.split() - разбивает строку по пробелам. Там где встречает пробел, он его удаляет.
# Там где что было до пробела, он добавляет в новую строку и сохраняет её в список s = ['Ivanov', 'Ivan', Ivanovich']
# s = s.split('n') - разбиваем строку по букве n (включительно) s = ['Iva', 'ov Iva', ' Iva', 'ovich']
# s = len(s.split()) = 4;                                              1        2        3       4

# ' '.join(s)
# s = ['Ivanov', 'Ivan', Ivanovich']; '='.join(s) - метод объеденяющий соседние значения и преобразующий Список,
# в одно целое значение (s = 'Ivanov=Ivan=Ivanovich')

# s.strip()
# s = s.strip() - указывать аргументы не нужно. Данный метод удаляет пробелы (везде) и переносы на новые строки (\n)
# s = s.rstrip() - Удаляет пробелы и новые строки только с правой строны
# s = s.lstrip() - Удаляет пробелы и новые строки только с левой стороны


                                                 #Списки и их методы

# 1) L.append(object) - Метод append() принимает один объект и добавляет его в конец списка L

#L=[1,2,3]
#L.append(7)
#L
#[1, 2, 3, 7]

# 2) L.insert(index,object) - Если вам необходимо вставить элемент в начало или другую позицию списка, используйте метод insert().
#Данный метод принимает 2 обязательных аргумента - индекс и объект. и он вставляет объект перед указанным индексом,
#при этом все элементы,стоящие справа index, сдвигаются. Не забывайте, что индексация начинается с 0

# >>> L=[1,2,3]
# >>> L.insert(1,100)
# >>> L
# [1, 100, 2, 3]

# 3) L.extend(iterable) - extend() принимает один обязательный аргумент - итерируемый объект.
# И затем расширяет список L элементами объекта iterable. Если передать этому методу неитерируемый объект, возникнет исключение TypeError

# >>> L=[1,2]
# >>> L.extend([3,4])
# >>> L
# [1, 2, 3, 4]
# >>> L.extend('Hi')
# >>> L
# [1, 2, 3, 4, 'H', 'i']
# >>> L.extend(range(2))
# >>> L
# [1, 2, 3, 4, 'H', 'i', 0, 1]
# >>> L.extend(12)
# TypeError: 'int' object is not iterable

# 4) L.pop([index]) - Метод pop() принимает один необязательный параметр index.
# Если его не передать, он будет равен индексу последнего элемента. Данный метод удаляет и возвращет элемент по индексу.
# В случае, если список пуст или индекс находится вне границ списка, вызывается исключение IndexError.

# >>> L=[100,200,300]
# >>> L.pop()
# 300
# >>> L
# [100, 200]
# >>> L.pop(0)
# 100
# >>> L
# [200]
# >>> L.pop(2)
# IndexError: pop index out of range

# 5) L.remove(value) - Принимает обязательный параметр value. Удаляет первое найденное слева значение value.
# В случае, если в списке нет value, вызывается исключение ValueError.

# >>> L = [1,2,3,1,2]
# >>> L.remove(2)
# >>> L
# [1, 3, 1, 2]
# >>> L.remove(100)
# ValueError: list.remove(x): x not in list

# 6) L.clear() - Метод clear() удаляет все элементы из списка L. Не принимает аргументов.

# >>> L=[1,2,3]
# >>> L.clear()
# >>> L
# []

# 7) L.copy() - Метод copy() выполняет поверхностное копирование.
# В примере видно, что списки L и A ссылаются на разные объекты(изменение списка L не влияет на список А).
# Если списки будут вложенные, то данный метод не сможет их скопировать так, чтобы вложенные элементы были независимыми.

# >>> L=[1,2,3]
# >>> A = L.copy()
# >>> A
# [1, 2, 3]
# >>> L[1]=200
# >>> L
# [1, 200, 3]
# >>> A
# [1, 2, 3]

# 8) L.count(value) - Принимает один обязательный параметр value.
# Возращает целое число - количество раз, которое значение value встретилось в списке L

# >>> L = [1,2,3,4,1]
# >>> L.count(1)
# 2
# >>> L.count(5)
# 0

# 9) L.index(value,[start,[stop]]) - Возращает первый индекс значения value в списке L.
# В случае, если значение value отсутствует в списке L вызывается исключение ValueError.
# Принимает один обязательный параметр value и 2 необязательных - start и stop

# >>> L = [1,2,3,4,3,2,1]
# >>> L.index(2)
# 1
# >>> L.index(2,2)
# 5
# >>> L.index(2,2,4)
# ValueError: 2 is not in list

# 10) L.reverse() - Метод reverse() переворачивает список.

# >>> L = [6,4,8,2,9,1,5]
# >>> L.reverse()
# >>> L
# [5, 1, 9, 2, 8, 4, 6]

# 11) L.sort() и L.sort(reverse=True) - Метод sort() без указания параметров сортирует элементы списка L по возрастанию.
# Если вызвать sort(reverse=True) то сортировка будет выполняться по убыванию

# >>> L = [6,4,8,2,9,1,5]
# >>> L.sort()
# >>> L
# [1, 2, 4, 5, 6, 8, 9]
# >>> L.sort(reverse=True)
# >>> L
# [9, 8, 6, 5, 4, 2, 1]